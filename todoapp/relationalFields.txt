## Django Relational Fields ##

Many-to-one Fields
-For example – a model Song has many-to-one relationship with a model Album, i.e. an 
album can have many songs, but one song cannot be part of multiple albums. Many-to-one 
relations are defined using ForeignKey field of django.db.models.

	from django.db import models

	class Album(models.Model):
		title = models.CharField(max_length = 100)
		artist = models.CharField(max_length = 100)

	class Song(models.Model):
		title = models.CharField(max_length = 100)
		album = models.ForeignKey(Album, on_delete = models.CASCADE)


Many-to-many Fields
-Like a book. A book can have many authos and authors can have many books. 
Many-to-many relations are defined using ManyToManyField field of django.db.models.

	from django.db import models

	class Author(models.Model):
		name = models.CharField(max_length = 100)
		desc = models.TextField(max_length = 300)

	class Book(models.Model):
		title = models.CharField(max_length = 100)
		desc = models.TextField(max_length = 300)
		authors = models.ManyToManyField(Author)


One-to-one Fields
-This field can be useful as a primary key of an object if that object extends another 
object in some way. For example – a model Car has one-to-one relationship with a model 
Vehicle, i.e. a car is a vehicle. One-to-one relations are defined using OneToOneField 
field of django.db.models.

	from django.db import models

	class Vehicle(models.Model):
		reg_no = models.IntegerField()
		owner = models.CharField(max_length = 100)

	class Car(models.Model):
		vehicle = models.OneToOneField(Vehicle,
			on_delete = models.CASCADE, primary_key = True)
		car_model = models.CharField(max_length = 100)


## "on_delete" Values

-on_delete = models.CASCADE – This is the default value. It automatically deletes all 
the related records when a record is deleted.(e.g. when an Album record is deleted all 
the Song records related to it will be deleted)

-on_delete = models.PROTECT – It blocks the deletion of a record having relation with 
other records.(e.g. any attempt to delete an Album record will be blocked)

-on_delete = models.SET_NULL – It assigns NULL to the relational field when a record is deleted, provided null = True is set.

-on_delete = models.SET_DEFAULT – It assigns default values to the relational field 
when a record is deleted, a default value has to be provided.

-on_delete = models.SET() – It can either take a default value as parameter, or a 
callable, the return value of which will be assigned to the field.

-on_delete = models.DO_NOTHING – Takes no action. Its a bad practice to use this value.